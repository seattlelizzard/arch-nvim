* My Neovim Config
Yes I am configuring Neovim from emacs. Why? Because I am simply an agent of chaos. Also this org tangle thing is the most amazing tool for building configuration files I've ever seen. Plus I think this will help me get the hang of my neovim lua stuff this way.
#+begin_src lua :tangle ./init.lua
require("config.lazy")
require("config.nvim-config")
require("config.neo-tree")
require("config.telescope")
vim.o.clipboard = "unnamedplus"
#+end_src
** Plugins
*** alpha
#+begin_src lua :tangle ./lua/plugins/alpha.lua
  return {
	{
		"goolord/alpha-nvim",
		-- dependencies = { 'echasnovski/mini.icons' },
		dependencies = { "nvim-tree/nvim-web-devicons" },
		config = function()
			local startify = require("alpha.themes.startify")
			-- available: devicons, mini, default is mini
			-- if provider not loaded and enabled is true, it will try to use another provider
			startify.file_icons.provider = "devicons"
			require("alpha").setup(startify.config)
		end,
	},
}
#+end_src
*** Completions
#+begin_src lua :tangle ./lua/plugins/completions.lua
  return {
  {
    "hrsh7th/cmp-nvim-lsp",
    config = function()
      
    end
  },
	{
		"L3MON4D3/LuaSnip",
		dependencies = {
			"saadparwaiz1/cmp_luasnip",
			"rafamadriz/friendly-snippets",
		},
	},
	{
		"hrsh7th/nvim-cmp",
		config = function()
			local cmp = require("cmp")
			require("luasnip.loaders.from_vscode").lazy_load()

			cmp.setup({
				snippet = {
					-- REQUIRED - you must specify a snippet engine
					expand = function(args)
						require("luasnip").lsp_expand(args.body) -- For `luasnip` users.
					end,
				},
				window = {
					completion = cmp.config.window.bordered(),
					documentation = cmp.config.window.bordered(),
				},
				mapping = cmp.mapping.preset.insert({
					["<C-b>"] = cmp.mapping.scroll_docs(-4),
					["<C-f>"] = cmp.mapping.scroll_docs(4),
					["<C-Space>"] = cmp.mapping.complete(),
					["<C-e>"] = cmp.mapping.abort(),
					["<CR>"] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
				}),
				sources = cmp.config.sources({
					{ name = "nvim_lsp" },
					{ name = "luasnip" }, -- For luasnip users.
				}, {
					{ name = "buffer" },
				}),
			})
		end,
	},
}
#+end_src
*** Dressing
#+begin_src lua :tangle ./lua/plugins/dressing.lua
  return {
  -- you can use the VeryLazy event for things that can
  -- load later and are not important for the initial UI
  { "stevearc/dressing.nvim", event = "VeryLazy" },
}
#+end_src
*** LSP Config
#+begin_src lua :tangle ./lua/plugins/lsp-config.lua
  return {
	{
		"williamboman/mason.nvim",
		config = function()
			require("mason").setup({
				ui = {
					icons = {
						package_installed = "✓",
						package_pending = "➜",
						package_uninstalled = "✗",
					},
				},
			})
		end,
	},
	{
		"williamboman/mason-lspconfig.nvim",
		lazy = false,
		opts = {
			auto_instal = true,
		},
		config = function()
			require("mason-lspconfig").setup({
				ensure_installed = {
					"lua_ls",
					"ts_ls",
					"ruff",
					"rust_analyzer",
				},
			})
		end,
	},
	{
		"neovim/nvim-lspconfig",
		config = function() -- for help on nvim options go to :h vim.lsp.buf
			local capabilities = require("cmp_nvim_lsp").default_capabilities()
			local lspconfig = require("lspconfig")
			lspconfig.lua_ls.setup({
				capabilities = capabilities,
			})
			lspconfig.ts_ls.setup({
				capabilities = capabilities,
			})
			lspconfig.ruff.setup({
				capabilities = capabilities,
			})
			lspconfig.rust_analyzer.setup({
				capabilities = capabilities,
				settings = {
					["rust-analyzer"] = {
						-- Other Settings ...
						procMacro = {
							ignored = {
								leptos_macro = {
									-- optional: --
									-- "component",
									"server",
								},
							},
						},
					},
				},
			})
			vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
			vim.keymap.set("n", "gd", vim.lsp.buf.definition, {})
			vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, {})
		end,
	},
}
#+end_src
*** Lualine
#+begin_src lua :tangle ./lua/plugins/lualine.lua
  return {
  {
    "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("lualine").setup({
        options = {
          icons_enabled = true,
          theme = "dracula",
          component_separators = { left = "", right = "" },
          section_separators = { left = "", right = "" },
          disabled_filetypes = {
            statusline = {},
            winbar = {},
          },
          ignore_focus = {},
          always_divide_middle = true,
          always_show_tabline = true,
          globalstatus = false,
          refresh = {
            statusline = 1000,
            tabline = 1000,
            winbar = 1000,
          },
        },
        sections = {
          lualine_a = { "mode" },
          lualine_b = { "branch", "diff", "diagnostics" },
          lualine_c = { "filename" },
          lualine_x = { "encoding", "fileformat", "filetype" },
          lualine_y = { "progress" },
          lualine_z = { "location" },
        },
        inactive_sections = {
          lualine_a = {},
          lualine_b = {},
          lualine_c = { "filename" },
          lualine_x = { "location" },
          lualine_y = {},
          lualine_z = {},
        },
        tabline = {},
        winbar = {},
        inactive_winbar = {},
        extensions = {},
      })
    end,
  },
}
#+end_src
*** Neo Tree
#+begin_src lua :tangle ./lua/plugins/neo-tree.lua
 return {
  {
    "nvim-neo-tree/neo-tree.nvim",
    branch = "v3.x",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
      "MunifTanjim/nui.nvim",
      -- "3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
    },
  },
}
#+end_src
*** Neorg
#+begin_src lua :tangle ./lua/plugins/neorg.lua
 return {

  {
    "nvim-neorg/neorg",
    -- lazy-load on filetype
    ft = "norg",
    -- options for neorg. This will automatically call `require("neorg").setup(opts)`
    opts = {
      load = {
        ["core.defaults"] = {},
      },
    },
  },
}
#+end_src
*** None-ls
#+begin_src lua :tangle ./lua/plugins/none-ls.lua
  return {
  "nvimtools/none-ls.nvim",
  config = function()
    local null_ls = require("null-ls")

    null_ls.setup({
      sources = {
        null_ls.builtins.formatting.stylua,
        null_ls.builtins.completion.spell,
        --null_ls.builtins.completion.isort,
        null_ls.builtins.formatting.black,
        null_ls.builtins.diagnostics.rubocop,
        null_ls.builtins.diagnostics.eslint_d,
        --require("none-ls.diagnostics.eslint"), -- requires none-ls-extras.nvim
      },
    })
    vim.keymap.set("n", "<leader>gf", vim.lsp.buf.format, {})
  end,
}

#+end_src
*** DAP Config
#+begin_src lua :tangle ./lua/plugins/nvim-dap.lua
  return {
	{
		"mfussenegger/nvim-dap",
		dependencies = {
			"rcarriga/nvim-dap-ui",
			"nvim-neotest/nvim-nio",
			"leoluz/nvim-dap-go",
		},
		config = function()
			local dap, dapui = require("dap"), require("dapui")
			require("dapui").setup()
			require("dap-go").setup()

			dap.listeners.before.attach.dapui_config = function()
				dapui.open()
			end
			dap.listeners.before.launch.dapui_config = function()
				dapui.open()
			end
			dap.listeners.before.event_terminated.dapui_config = function()
				dapui.close()
			end
			dap.listeners.before.event_exited.dapui_config = function()
				dapui.close()
			end

			vim.keymap.set("n", "<F5>", function()
				require("dap").continue()
			end)
			vim.keymap.set("n", "<F10>", function()
				require("dap").step_over()
			end)
			vim.keymap.set("n", "<F11>", function()
				require("dap").step_into()
			end)
			vim.keymap.set("n", "<F12>", function()
				require("dap").step_out()
			end)
			vim.keymap.set("n", "<Leader>b", function()
				require("dap").toggle_breakpoint()
			end)
			vim.keymap.set("n", "<Leader>B", function()
				require("dap").set_breakpoint()
			end)
			vim.keymap.set("n", "<Leader>lp", function()
				require("dap").set_breakpoint(nil, nil, vim.fn.input("Log point message: "))
			end)
			vim.keymap.set("n", "<Leader>dr", function()
				require("dap").repl.open()
			end)
			vim.keymap.set("n", "<Leader>dl", function()
				require("dap").run_last()
			end)
			vim.keymap.set({ "n", "v" }, "<Leader>dh", function()
				require("dap.ui.widgets").hover()
			end)
			vim.keymap.set({ "n", "v" }, "<Leader>dp", function()
				require("dap.ui.widgets").preview()
			end)
			vim.keymap.set("n", "<Leader>df", function()
				local widgets = require("dap.ui.widgets")
				widgets.centered_float(widgets.frames)
			end)
			vim.keymap.set("n", "<Leader>ds", function()
				local widgets = require("dap.ui.widgets")
				widgets.centered_float(widgets.scopes)
			end)
		end,
	},
}
#+end_src
*** Startup Time
#+begin_src lua :tangle ./lua/plugins/startup-time.lua
  return {

  {
    "dstein64/vim-startuptime",
    -- lazy-load on a command
    cmd = "StartupTime",
    -- init is called during startup. Configuration for vim plugins typically should be set in an init function
    init = function()
      vim.g.startuptime_tries = 10
    end,
  },
}
#+end_src
*** Telescope
#+begin_src lua :tangle ./lua/plugins/telescope.lua
 return {
 
  {
    'nvim-telescope/telescope.nvim', tag = '0.1.8',
-- or                              , branch = '0.1.x',
      dependencies = { 'nvim-lua/plenary.nvim' }
    },
    {
      'nvim-telescope/telescope-ui-select.nvim',
      config = function()
        -- This is your opts table
require("telescope").setup({
  extensions = {
    ["ui-select"] = {
      require("telescope.themes").get_dropdown {
        -- even more opts
      }

      -- pseudo code / specification for writing custom displays, like the one
      -- for "codeactions"
      -- specific_opts = {
      --   [kind] = {
      --     make_indexed = function(items) -> indexed_items, width,
      --     make_displayer = function(widths) -> displayer
      --     make_display = function(displayer) -> function(e)
      --     make_ordinal = function(e) -> string
      --   },
      --   -- for example to disable the custom builtin "codeactions" display
      --      do the following
        --   codeactions = false,
        -- }
      }
    }
    })
    -- To get ui-select loaded and working with telescope, you need to call
    -- load_extension, somewhere after setup function:
    require("telescope").load_extension("ui-select")
    end
    },
}
#+end_src
*** Theme
#+begin_src lua :tangle ./lua/plugins/theme.lua
 return {

  {
    "folke/tokyonight.nvim",
    lazy = false,  -- make sure we load this during startup if it is your main colorscheme
    priority = 1000, -- make sure to load this before all the other start plugins
    config = function()
      -- load the colorscheme here
      vim.cmd([[colorscheme tokyonight]])
    end,
  },
}
#+end_src
*** Treesitter
#+begin_src lua :tangle ./lua/plugins/treesitter.lua
 return {
	{
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		config = function()
			local config = require("nvim-treesitter.configs")
			config.setup({
				auto_install = true,
				highlight = { enable = true },
				indent = { enable = true },
			})
		end,
	},
}
#+end_src
*** Web Dev Icons
#+begin_src lua :tangle ./lua/plugins/web-devicons.lua
 return {
  -- if some code requires a module from an unloaded plugin, it will be automatically loaded.
  -- So for api plugins like devicons, we can always set lazy=true
  { "nvim-tree/nvim-web-devicons", lazy = true },
}
#+end_src
*** Which Key
#+begin_src lua :tangle ./lua/plugins/which-key.lua
 return {
  { "folke/which-key.nvim", lazy = true },
} 
#+end_src
*** Lazygit
#+begin_src lua :tangle ./lua/plugins/lazygit.lua
-- nvim v0.8.0
return {
    "kdheepak/lazygit.nvim",
    lazy = true,
    cmd = {
        "LazyGit",
        "LazyGitConfig",
        "LazyGitCurrentFile",
        "LazyGitFilter",
        "LazyGitFilterCurrentFile",
    },
    -- optional for floating window border decoration
    dependencies = {
        "nvim-lua/plenary.nvim",
    },
    -- setting the keybinding for LazyGit with 'keys' is recommended in
    -- order to load the plugin when the command is run for the first time
    keys = {
        { "<leader>lg", "<cmd>LazyGit<cr>", desc = "LazyGit" }
    }
}
#+end_src
*** nvim colorizer
Allows previewing Colors. https://github.com/norcalli/nvim-colorizer.lua
#+begin_src lua :tangle ./lua/plugins/colorizer.lua
return {
  {
    'norcalli/nvim-colorizer.lua',
    config = function()
      require'colorizer'.setup {
        '*', -- Highlight all files by default
        css = { rgb_fn = true }, -- Enable rgb() and rgba() in CSS
        html = { names = false }, -- Disable named colors in HTML
        '!vim', -- Exclude Vim filetype from highlighting
      }
    end
  }
}
#+end_src
**** Decimal to Hex conversion
This is a script that allows you to enter visual mode to select a number, then press leader + x to reformat that decimal as hex.
#+begin_src lua :tangle ./lua/plugins/decihex-convert.lua
return {
  {
    'nvim-lua/plenary.nvim', -- Optional dependency for shell commands
    config = function()
      -- Function to replace visual selection with the printf output
      local function replace_with_printf()
        -- Get the visual selection range
        local line_start, col_start = unpack(vim.fn.getpos("'<"), 2, 3)
        local line_end, col_end = unpack(vim.fn.getpos("'>"), 2, 3)

        -- Get the selected lines
        local lines = vim.api.nvim_buf_get_lines(0, line_start - 1, line_end, false)

        -- Trim the selection to the exact range
        if #lines > 0 then
          lines[#lines] = string.sub(lines[#lines], 1, col_end)
          lines[1] = string.sub(lines[1], col_start)
        end
        local selection = table.concat(lines, " ")

        -- Run printf command on the selection
        local handle = io.popen(string.format('printf "%%x\\n" %s', selection))
        local result = handle:read("*a")
        handle:close()

        -- Remove trailing newlines from the result
        result = result:gsub("%s+$", "")

        -- Replace the selected text with the output
        vim.api.nvim_buf_set_text(
          0, -- Current buffer
          line_start - 1, col_start - 1, -- Start position
          line_end - 1, col_end, -- End position
          { result } -- Replacement text
        )
      end

      -- Create a user command for ReplaceWithHex
      vim.api.nvim_create_user_command("ReplaceWithHex", function()
        replace_with_printf()
      end, {
        range = true, -- Allow range for manual invocation
      })

      -- Map <leader>x to call the command in visual mode
      vim.api.nvim_set_keymap(
        'v', -- Visual mode
        '<leader>x', -- Your chosen keybinding
        ":<C-u>ReplaceWithHex<CR>", -- Clear the range before invoking the command
        { noremap = true, silent = true }
      )
    end
  }
}
#+end_src
** Config
*** Lazy
#+begin_src lua :tangle ./lua/config/lazy.lua
 -- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    -- import your plugins
    { import = "plugins" },
  },
  -- Configure any other settings here. See the documentation for more details.
  -- colorscheme that will be used when installing plugins.
  install = { colorscheme = { "habamax" } },
  -- automatically check for plugin updates
  checker = { enabled = true },
})
#+end_src
*** Neo Tree
#+begin_src lua :tangle ./lua/config/neo-tree.lua
  vim.keymap.set('n','<leader>e',':Neotree toggle left <CR>') 

vim.filetype.add({
  pattern = { [".*/hypr/.*%.conf"] = "hyprlang" },
})
#+end_src
*** Telescope
#+begin_src lua :tangle ./lua/config/telescope.lua
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })
#+end_src
*** Misc
#+begin_src lua :tangle ./lua/config/nvim-config.lua
vim.cmd("set expandtab")
vim.cmd("set tabstop=2")
vim.cmd("set softtabstop=2")
vim.cmd("set shiftwidth=2")
vim.cmd("set number")
vim.cmd('set background=dark') -- or 'light'
vim.cmd('highlight LineNr guifg=#ffffff guibg=#000000')
vim.cmd('hi LineNrAbove guifg=red ctermfg=red')
vim.cmd('highlight LineNrBelow guifg=#bdff96 ctermfg=green')
-- Toggle relative line numbers
vim.api.nvim_set_keymap('n', '<leader>n', ':set relativenumber!<CR>', { noremap = true, silent = true })

vim.cmd('hi Normal ctermbg=none') -- or 'light'
vim.cmd('highlight LineNr ctermbg=none') -- or 'light'
vim.cmd('highlight NonText ctermbg=none') -- or 'light'
vim.cmd('highlight Normal guibg=NONE ctermbg=NONE')

vim.cmd('highlight NeoTreeNormal guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeIndentMarker guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeDirectoryName guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeFileName guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeNormal guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeWinSeparator guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeDirectory guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeFile guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeIndentMarker guibg=NONE ctermbg=NONE')
vim.cmd('highlight Normal guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeNormal guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeWinSeparator guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeDirectory guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeFile guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeIndentMarker guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeCursorLine guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeGitModified guibg=NONE ctermbg=NONE')
vim.cmd('highlight NeoTreeGitDeleted guibg=NONE ctermbg=NONE')
#+end_src
